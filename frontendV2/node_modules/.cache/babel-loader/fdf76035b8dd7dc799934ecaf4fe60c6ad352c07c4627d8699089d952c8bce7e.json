{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/a.tiwari/git/amazon-s3-multipart-upload-transfer-acceleration/frontendV2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _toConsumableArray from\"C:/Users/a.tiwari/git/amazon-s3-multipart-upload-transfer-acceleration/frontendV2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"C:/Users/a.tiwari/git/amazon-s3-multipart-upload-transfer-acceleration/frontendV2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _classCallCheck from\"C:/Users/a.tiwari/git/amazon-s3-multipart-upload-transfer-acceleration/frontendV2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/Users/a.tiwari/git/amazon-s3-multipart-upload-transfer-acceleration/frontendV2/node_modules/@babel/runtime/helpers/esm/createClass.js\";import axios from\"axios\";// initializing axios\nvar api=axios.create({baseURL:\"/\"});// original source: https://github.com/pilovm/multithreaded-uploader/blob/master/frontend/uploader.js\nexport var Uploader=/*#__PURE__*/function(){function Uploader(options){_classCallCheck(this,Uploader);this.useTransferAcceleration=options.useTransferAcceleration;// this must be bigger than or equal to 5MB,\n// otherwise AWS will respond with:\n// \"Your proposed upload is smaller than the minimum allowed size\"\noptions.chunkSize=options.chunkSize||0;this.chunkSize=Math.max(1024*1024*options.chunkSize,1024*1024*5);// number of parallel uploads\noptions.threadsQuantity=options.threadsQuantity||0;this.threadsQuantity=Math.min(options.threadsQuantity||5,15);// adjust the timeout value to activate exponential backoff retry strategy \nthis.timeout=0;this.file=options.file;this.fileName=options.fileName;this.aborted=false;this.uploadedSize=0;this.progressCache={};this.activeConnections={};this.parts=[];this.uploadedParts=[];this.fileId=null;this.fileKey=null;this.onProgressFn=function(){};this.onErrorFn=function(){};this.baseURL=options.baseURL;}_createClass(Uploader,[{key:\"start\",value:function start(){this.initialize();}},{key:\"initialize\",value:function(){var _initialize=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var _this$parts,fileName,videoInitializationUploadInput,initializeReponse,AWSFileDataOutput,numberOfparts,AWSMultipartFileDataInput,urlsResponse,newParts;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;// adding the the file extension (if present) to fileName\nfileName=this.file.name;// initializing the multipart request\nvideoInitializationUploadInput={name:fileName};_context.next=5;return api.request({url:\"/initialize\",method:\"POST\",data:videoInitializationUploadInput,baseURL:this.baseURL});case 5:initializeReponse=_context.sent;AWSFileDataOutput=initializeReponse.data;this.fileId=AWSFileDataOutput.fileId;this.fileKey=AWSFileDataOutput.fileKey;// retrieving the pre-signed URLs\nnumberOfparts=Math.ceil(this.file.size/this.chunkSize);AWSMultipartFileDataInput={fileId:this.fileId,fileKey:this.fileKey,parts:numberOfparts};_context.next=13;return api.request({url:this.useTransferAcceleration?\"/getPreSignedTAUrls\":\"/getPreSignedUrls\",method:\"POST\",data:AWSMultipartFileDataInput,baseURL:this.baseURL});case 13:urlsResponse=_context.sent;newParts=urlsResponse.data.parts;(_this$parts=this.parts).push.apply(_this$parts,_toConsumableArray(newParts));this.sendNext();_context.next=23;break;case 19:_context.prev=19;_context.t0=_context[\"catch\"](0);_context.next=23;return this.complete(_context.t0);case 23:case\"end\":return _context.stop();}}},_callee,this,[[0,19]]);}));function initialize(){return _initialize.apply(this,arguments);}return initialize;}()},{key:\"sendNext\",value:function sendNext(){var _this=this;var retry=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var activeConnections=Object.keys(this.activeConnections).length;if(activeConnections>=this.threadsQuantity){return;}if(!this.parts.length){if(!activeConnections){this.complete();}return;}var part=this.parts.pop();if(this.file&&part){var sentSize=(part.PartNumber-1)*this.chunkSize;var chunk=this.file.slice(sentSize,sentSize+this.chunkSize);var sendChunkStarted=function sendChunkStarted(){_this.sendNext();};this.sendChunk(chunk,part,sendChunkStarted).then(function(){_this.sendNext();}).catch(function(error){if(retry<=6){retry++;var wait=function wait(ms){return new Promise(function(res){return setTimeout(res,ms);});};//exponential backoff retry before giving up\nconsole.log(\"Part#\".concat(part.PartNumber,\" failed to upload, backing off \").concat(Math.pow(2,retry)*100,\" before retrying...\"));wait(Math.pow(2,retry)*100).then(function(){_this.parts.push(part);_this.sendNext(retry);});}else{console.log(\"Part#\".concat(part.PartNumber,\" failed to upload, giving up\"));_this.complete(error);}});}}},{key:\"complete\",value:function(){var _complete=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(error){return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(error&&!this.aborted)){_context2.next=3;break;}this.onErrorFn(error);return _context2.abrupt(\"return\");case 3:if(!error){_context2.next=6;break;}this.onErrorFn(error);return _context2.abrupt(\"return\");case 6:_context2.prev=6;_context2.next=9;return this.sendCompleteRequest();case 9:_context2.next=14;break;case 11:_context2.prev=11;_context2.t0=_context2[\"catch\"](6);this.onErrorFn(_context2.t0);case 14:case\"end\":return _context2.stop();}}},_callee2,this,[[6,11]]);}));function complete(_x){return _complete.apply(this,arguments);}return complete;}()},{key:\"sendCompleteRequest\",value:function(){var _sendCompleteRequest=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(){var videoFinalizationMultiPartInput;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(this.fileId&&this.fileKey)){_context3.next=4;break;}videoFinalizationMultiPartInput={fileId:this.fileId,fileKey:this.fileKey,parts:this.uploadedParts};_context3.next=4;return api.request({url:\"/finalize\",method:\"POST\",data:videoFinalizationMultiPartInput,baseURL:this.baseURL});case 4:case\"end\":return _context3.stop();}}},_callee3,this);}));function sendCompleteRequest(){return _sendCompleteRequest.apply(this,arguments);}return sendCompleteRequest;}()},{key:\"sendChunk\",value:function sendChunk(chunk,part,sendChunkStarted){var _this2=this;return new Promise(function(resolve,reject){_this2.upload(chunk,part,sendChunkStarted).then(function(status){if(status!==200){reject(new Error(\"Failed chunk upload\"));return;}resolve();}).catch(function(error){reject(error);});});}},{key:\"handleProgress\",value:function handleProgress(part,event){var _this3=this;if(this.file){if(event.type===\"progress\"||event.type===\"error\"||event.type===\"abort\"){this.progressCache[part]=event.loaded;}if(event.type===\"uploaded\"){this.uploadedSize+=this.progressCache[part]||0;delete this.progressCache[part];}var inProgress=Object.keys(this.progressCache).map(Number).reduce(function(memo,id){return memo+=_this3.progressCache[id];},0);var sent=Math.min(this.uploadedSize+inProgress,this.file.size);var total=this.file.size;var percentage=Math.round(sent/total*100);this.onProgressFn({sent:sent,total:total,percentage:percentage});}}},{key:\"upload\",value:function upload(file,part,sendChunkStarted){var _this4=this;// uploading each part with its pre-signed URL\nreturn new Promise(function(resolve,reject){var throwXHRError=function throwXHRError(error,part,abortFx){delete _this4.activeConnections[part.PartNumber-1];reject(error);window.removeEventListener('offline',abortFx);};if(_this4.fileId&&_this4.fileKey){if(!window.navigator.onLine)reject(new Error(\"System is offline\"));var xhr=_this4.activeConnections[part.PartNumber-1]=new XMLHttpRequest();xhr.timeout=_this4.timeout;sendChunkStarted();var progressListener=_this4.handleProgress.bind(_this4,part.PartNumber-1);xhr.upload.addEventListener(\"progress\",progressListener);xhr.addEventListener(\"error\",progressListener);xhr.addEventListener(\"abort\",progressListener);xhr.addEventListener(\"loadend\",progressListener);xhr.open(\"PUT\",part.signedUrl);var abortXHR=function abortXHR(){return xhr.abort();};xhr.onreadystatechange=function(){if(xhr.readyState===4&&xhr.status===200){var ETag=xhr.getResponseHeader(\"ETag\");if(ETag){var uploadedPart={PartNumber:part.PartNumber,ETag:ETag.replaceAll('\"',\"\")};_this4.uploadedParts.push(uploadedPart);resolve(xhr.status);delete _this4.activeConnections[part.PartNumber-1];window.removeEventListener('offline',abortXHR);}}};xhr.onerror=function(error){throwXHRError(error,part,abortXHR);};xhr.ontimeout=function(error){throwXHRError(error,part,abortXHR);};xhr.onabort=function(){throwXHRError(new Error(\"Upload canceled by user or system\"),part);};window.addEventListener('offline',abortXHR);xhr.send(file);}});}},{key:\"onProgress\",value:function onProgress(_onProgress){this.onProgressFn=_onProgress;return this;}},{key:\"onError\",value:function onError(_onError){this.onErrorFn=_onError;return this;}},{key:\"abort\",value:function abort(){var _this5=this;Object.keys(this.activeConnections).map(Number).forEach(function(id){_this5.activeConnections[id].abort();});this.aborted=true;}}]);return Uploader;}();","map":{"version":3,"names":["axios","api","create","baseURL","Uploader","options","_classCallCheck","useTransferAcceleration","chunkSize","Math","max","threadsQuantity","min","timeout","file","fileName","aborted","uploadedSize","progressCache","activeConnections","parts","uploadedParts","fileId","fileKey","onProgressFn","onErrorFn","_createClass","key","value","start","initialize","_initialize","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this$parts","videoInitializationUploadInput","initializeReponse","AWSFileDataOutput","numberOfparts","AWSMultipartFileDataInput","urlsResponse","newParts","wrap","_callee$","_context","prev","next","name","request","url","method","data","sent","ceil","size","push","apply","_toConsumableArray","sendNext","t0","complete","stop","arguments","_this","retry","length","undefined","Object","keys","part","pop","sentSize","PartNumber","chunk","slice","sendChunkStarted","sendChunk","then","catch","error","wait","ms","Promise","res","setTimeout","console","log","concat","pow","_complete","_callee2","_callee2$","_context2","abrupt","sendCompleteRequest","_x","_sendCompleteRequest","_callee3","videoFinalizationMultiPartInput","_callee3$","_context3","_this2","resolve","reject","upload","status","Error","handleProgress","event","_this3","type","loaded","inProgress","map","Number","reduce","memo","id","total","percentage","round","_this4","throwXHRError","abortFx","window","removeEventListener","navigator","onLine","xhr","XMLHttpRequest","progressListener","bind","addEventListener","open","signedUrl","abortXHR","abort","onreadystatechange","readyState","ETag","getResponseHeader","uploadedPart","replaceAll","onerror","ontimeout","onabort","send","onProgress","onError","_this5","forEach"],"sources":["C:/Users/a.tiwari/git/amazon-s3-multipart-upload-transfer-acceleration/frontendV2/src/utils/upload.js"],"sourcesContent":["import axios from \"axios\"\r\n\r\n// initializing axios\r\nconst api = axios.create({\r\n  baseURL: \"/\",\r\n})\r\n\r\n// original source: https://github.com/pilovm/multithreaded-uploader/blob/master/frontend/uploader.js\r\nexport class Uploader {\r\n  constructor(options) {\r\n    this.useTransferAcceleration = options.useTransferAcceleration\r\n    // this must be bigger than or equal to 5MB,\r\n    // otherwise AWS will respond with:\r\n    // \"Your proposed upload is smaller than the minimum allowed size\"\r\n    options.chunkSize = options.chunkSize || 0\r\n    this.chunkSize = Math.max((1024 * 1024 * options.chunkSize), (1024 * 1024 * 5))\r\n    // number of parallel uploads\r\n    options.threadsQuantity = options.threadsQuantity || 0\r\n    this.threadsQuantity = Math.min(options.threadsQuantity || 5, 15)\r\n    // adjust the timeout value to activate exponential backoff retry strategy \r\n    this.timeout = 0\r\n    this.file = options.file\r\n    this.fileName = options.fileName\r\n    this.aborted = false\r\n    this.uploadedSize = 0\r\n    this.progressCache = {}\r\n    this.activeConnections = {}\r\n    this.parts = []\r\n    this.uploadedParts = []\r\n    this.fileId = null\r\n    this.fileKey = null\r\n    this.onProgressFn = () => {}\r\n    this.onErrorFn = () => {}\r\n    this.baseURL = options.baseURL\r\n  }\r\n\r\n  start() {\r\n    this.initialize()\r\n  }\r\n\r\n  async initialize() {\r\n    try {\r\n      // adding the the file extension (if present) to fileName\r\n      let fileName = this.file.name\r\n\r\n      // initializing the multipart request\r\n      const videoInitializationUploadInput = {\r\n        name: fileName,\r\n      }\r\n      const initializeReponse = await api.request({\r\n        url: \"/initialize\",\r\n        method: \"POST\",\r\n        data: videoInitializationUploadInput,\r\n        baseURL:this.baseURL\r\n      })\r\n\r\n      const AWSFileDataOutput = initializeReponse.data\r\n\r\n      this.fileId = AWSFileDataOutput.fileId\r\n      this.fileKey = AWSFileDataOutput.fileKey\r\n\r\n      // retrieving the pre-signed URLs\r\n      const numberOfparts = Math.ceil(this.file.size / this.chunkSize)\r\n\r\n      const AWSMultipartFileDataInput = {\r\n        fileId: this.fileId,\r\n        fileKey: this.fileKey,\r\n        parts: numberOfparts,\r\n      }\r\n\r\n      const urlsResponse = await api.request({\r\n        url: this.useTransferAcceleration?\"/getPreSignedTAUrls\":\"/getPreSignedUrls\",\r\n        method: \"POST\",\r\n        data: AWSMultipartFileDataInput,\r\n        baseURL:this.baseURL\r\n      })\r\n\r\n      const newParts = urlsResponse.data.parts\r\n      this.parts.push(...newParts)\r\n\r\n      this.sendNext()\r\n    } catch (error) {\r\n      await this.complete(error)\r\n    }\r\n  }\r\n\r\n  sendNext(retry=0) {\r\n    const activeConnections = Object.keys(this.activeConnections).length\r\n\r\n    if (activeConnections >= this.threadsQuantity) {\r\n      return\r\n    }\r\n\r\n    if (!this.parts.length) {\r\n      if (!activeConnections) {\r\n        this.complete()\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    const part = this.parts.pop()    \r\n    if (this.file && part) {\r\n      const sentSize = (part.PartNumber - 1) * this.chunkSize\r\n      const chunk = this.file.slice(sentSize, sentSize + this.chunkSize)\r\n\r\n      const sendChunkStarted = () => {\r\n        this.sendNext()\r\n      }\r\n\r\n      this.sendChunk(chunk, part, sendChunkStarted)\r\n        .then(() => {\r\n          this.sendNext()\r\n        })\r\n        .catch((error) => {          \r\n          if (retry <= 6){\r\n            retry++\r\n            const wait = (ms) => new Promise((res) => setTimeout(res, ms));\r\n            //exponential backoff retry before giving up\r\n            console.log(`Part#${part.PartNumber} failed to upload, backing off ${2 ** retry * 100} before retrying...`)\r\n            wait(2 ** retry * 100).then(() => {              \r\n              this.parts.push(part)\r\n              this.sendNext(retry)\r\n            })\r\n          }else{\r\n            console.log(`Part#${part.PartNumber} failed to upload, giving up`)\r\n            this.complete(error)\r\n          }\r\n        })\r\n    }\r\n  }\r\n\r\n  async complete(error) {\r\n    if (error && !this.aborted) {\r\n      this.onErrorFn(error)\r\n      return\r\n    }\r\n\r\n    if (error) {\r\n      this.onErrorFn(error)\r\n      return\r\n    }\r\n\r\n    try {\r\n      await this.sendCompleteRequest()\r\n    } catch (error) {\r\n      this.onErrorFn(error)\r\n    }\r\n  }\r\n\r\n  async sendCompleteRequest() {\r\n    if (this.fileId && this.fileKey) {\r\n      const videoFinalizationMultiPartInput = {\r\n        fileId: this.fileId,\r\n        fileKey: this.fileKey,\r\n        parts: this.uploadedParts,\r\n      }\r\n\r\n      await api.request({\r\n        url: \"/finalize\",\r\n        method: \"POST\",\r\n        data: videoFinalizationMultiPartInput,\r\n        baseURL:this.baseURL\r\n      })\r\n    }\r\n  }\r\n\r\n  sendChunk(chunk, part, sendChunkStarted) {\r\n    return new Promise((resolve, reject) => {\r\n      this.upload(chunk, part, sendChunkStarted)\r\n        .then((status) => {\r\n          if (status !== 200) {\r\n            reject(new Error(\"Failed chunk upload\"))\r\n            return\r\n          }\r\n\r\n          resolve()\r\n        })\r\n        .catch((error) => {\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n\r\n  handleProgress(part, event) {\r\n    if (this.file) {\r\n      if (event.type === \"progress\" || event.type === \"error\" || event.type === \"abort\") {\r\n        this.progressCache[part] = event.loaded\r\n      }\r\n\r\n      if (event.type === \"uploaded\") {\r\n        this.uploadedSize += this.progressCache[part] || 0\r\n        delete this.progressCache[part]\r\n      }\r\n\r\n      const inProgress = Object.keys(this.progressCache)\r\n        .map(Number)\r\n        .reduce((memo, id) => (memo += this.progressCache[id]), 0)\r\n\r\n      const sent = Math.min(this.uploadedSize + inProgress, this.file.size)\r\n\r\n      const total = this.file.size\r\n\r\n      const percentage = Math.round((sent / total) * 100)\r\n\r\n      this.onProgressFn({\r\n        sent: sent,\r\n        total: total,\r\n        percentage: percentage,\r\n      })\r\n    }\r\n  }\r\n\r\n  upload(file, part, sendChunkStarted) {\r\n    // uploading each part with its pre-signed URL\r\n    return new Promise((resolve, reject) => {\r\n      const throwXHRError = (error, part, abortFx) => {    \r\n        delete this.activeConnections[part.PartNumber - 1]\r\n        reject(error)\r\n        window.removeEventListener('offline', abortFx)    \r\n      }      \r\n      if (this.fileId && this.fileKey) {\r\n        if(!window.navigator.onLine)\r\n          reject(new Error(\"System is offline\"))\r\n\r\n        const xhr = (this.activeConnections[part.PartNumber - 1] = new XMLHttpRequest())\r\n        xhr.timeout = this.timeout\r\n        sendChunkStarted()\r\n\r\n        const progressListener = this.handleProgress.bind(this, part.PartNumber - 1)\r\n\r\n        xhr.upload.addEventListener(\"progress\", progressListener)\r\n\r\n        xhr.addEventListener(\"error\", progressListener)\r\n        xhr.addEventListener(\"abort\", progressListener)\r\n        xhr.addEventListener(\"loadend\", progressListener)\r\n\r\n        xhr.open(\"PUT\", part.signedUrl)\r\n        const abortXHR = () => xhr.abort()\r\n        xhr.onreadystatechange = () => {\r\n          if (xhr.readyState === 4 && xhr.status === 200) {\r\n            const ETag = xhr.getResponseHeader(\"ETag\")\r\n\r\n            if (ETag) {\r\n              const uploadedPart = {\r\n                PartNumber: part.PartNumber,\r\n                ETag: ETag.replaceAll('\"', \"\"),\r\n              }\r\n\r\n              this.uploadedParts.push(uploadedPart)\r\n\r\n              resolve(xhr.status)\r\n              delete this.activeConnections[part.PartNumber - 1]\r\n              window.removeEventListener('offline', abortXHR)\r\n            }\r\n          }\r\n        }\r\n\r\n        xhr.onerror = (error) => {\r\n          throwXHRError(error, part, abortXHR)\r\n        }\r\n        xhr.ontimeout = (error) => {\r\n          throwXHRError(error, part, abortXHR)\r\n        }\r\n        xhr.onabort = () => {\r\n          throwXHRError(new Error(\"Upload canceled by user or system\"), part)\r\n        }\r\n        window.addEventListener('offline', abortXHR);\r\n        xhr.send(file)\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n\r\n  onProgress(onProgress) {\r\n    this.onProgressFn = onProgress\r\n    return this\r\n  }\r\n\r\n  onError(onError) {\r\n    this.onErrorFn = onError\r\n    return this\r\n  }\r\n\r\n  abort() {\r\n    Object.keys(this.activeConnections)\r\n      .map(Number)\r\n      .forEach((id) => {\r\n        this.activeConnections[id].abort()\r\n      })\r\n\r\n    this.aborted = true\r\n  }\r\n}\r\n"],"mappings":"y1BAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,GAAM,CAAAC,GAAG,CAAGD,KAAK,CAACE,MAAM,CAAC,CACvBC,OAAO,CAAE,GACX,CAAC,CAAC,CAEF;AACA,UAAa,CAAAC,QAAQ,yBACnB,SAAAA,SAAYC,OAAO,CAAE,CAAAC,eAAA,MAAAF,QAAA,EACnB,IAAI,CAACG,uBAAuB,CAAGF,OAAO,CAACE,uBAAuB,CAC9D;AACA;AACA;AACAF,OAAO,CAACG,SAAS,CAAGH,OAAO,CAACG,SAAS,EAAI,CAAC,CAC1C,IAAI,CAACA,SAAS,CAAGC,IAAI,CAACC,GAAG,CAAE,IAAI,CAAG,IAAI,CAAGL,OAAO,CAACG,SAAS,CAAI,IAAI,CAAG,IAAI,CAAG,CAAE,CAAC,CAC/E;AACAH,OAAO,CAACM,eAAe,CAAGN,OAAO,CAACM,eAAe,EAAI,CAAC,CACtD,IAAI,CAACA,eAAe,CAAGF,IAAI,CAACG,GAAG,CAACP,OAAO,CAACM,eAAe,EAAI,CAAC,CAAE,EAAE,CAAC,CACjE;AACA,IAAI,CAACE,OAAO,CAAG,CAAC,CAChB,IAAI,CAACC,IAAI,CAAGT,OAAO,CAACS,IAAI,CACxB,IAAI,CAACC,QAAQ,CAAGV,OAAO,CAACU,QAAQ,CAChC,IAAI,CAACC,OAAO,CAAG,KAAK,CACpB,IAAI,CAACC,YAAY,CAAG,CAAC,CACrB,IAAI,CAACC,aAAa,CAAG,CAAC,CAAC,CACvB,IAAI,CAACC,iBAAiB,CAAG,CAAC,CAAC,CAC3B,IAAI,CAACC,KAAK,CAAG,EAAE,CACf,IAAI,CAACC,aAAa,CAAG,EAAE,CACvB,IAAI,CAACC,MAAM,CAAG,IAAI,CAClB,IAAI,CAACC,OAAO,CAAG,IAAI,CACnB,IAAI,CAACC,YAAY,CAAG,UAAM,CAAC,CAAC,CAC5B,IAAI,CAACC,SAAS,CAAG,UAAM,CAAC,CAAC,CACzB,IAAI,CAACtB,OAAO,CAAGE,OAAO,CAACF,OAAO,CAChC,CAACuB,YAAA,CAAAtB,QAAA,GAAAuB,GAAA,SAAAC,KAAA,CAED,SAAAC,MAAA,CAAQ,CACN,IAAI,CAACC,UAAU,CAAC,CAAC,CACnB,CAAC,GAAAH,GAAA,cAAAC,KAAA,gBAAAG,WAAA,CAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAC,QAAA,MAAAC,WAAA,CAAArB,QAAA,CAAAsB,8BAAA,CAAAC,iBAAA,CAAAC,iBAAA,CAAAC,aAAA,CAAAC,yBAAA,CAAAC,YAAA,CAAAC,QAAA,QAAAV,mBAAA,GAAAW,IAAA,UAAAC,SAAAC,QAAA,kBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAC,IAAA,GAEI;AACIhC,QAAQ,CAAG,IAAI,CAACD,IAAI,CAACmC,IAAI,CAE7B;AACMZ,8BAA8B,CAAG,CACrCY,IAAI,CAAElC,QACR,CAAC,CAAA+B,QAAA,CAAAE,IAAA,SAC+B,CAAA/C,GAAG,CAACiD,OAAO,CAAC,CAC1CC,GAAG,CAAE,aAAa,CAClBC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEhB,8BAA8B,CACpClC,OAAO,CAAC,IAAI,CAACA,OACf,CAAC,CAAC,QALImC,iBAAiB,CAAAQ,QAAA,CAAAQ,IAAA,CAOjBf,iBAAiB,CAAGD,iBAAiB,CAACe,IAAI,CAEhD,IAAI,CAAC/B,MAAM,CAAGiB,iBAAiB,CAACjB,MAAM,CACtC,IAAI,CAACC,OAAO,CAAGgB,iBAAiB,CAAChB,OAAO,CAExC;AACMiB,aAAa,CAAG/B,IAAI,CAAC8C,IAAI,CAAC,IAAI,CAACzC,IAAI,CAAC0C,IAAI,CAAG,IAAI,CAAChD,SAAS,CAAC,CAE1DiC,yBAAyB,CAAG,CAChCnB,MAAM,CAAE,IAAI,CAACA,MAAM,CACnBC,OAAO,CAAE,IAAI,CAACA,OAAO,CACrBH,KAAK,CAAEoB,aACT,CAAC,CAAAM,QAAA,CAAAE,IAAA,UAE0B,CAAA/C,GAAG,CAACiD,OAAO,CAAC,CACrCC,GAAG,CAAE,IAAI,CAAC5C,uBAAuB,CAAC,qBAAqB,CAAC,mBAAmB,CAC3E6C,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEZ,yBAAyB,CAC/BtC,OAAO,CAAC,IAAI,CAACA,OACf,CAAC,CAAC,SALIuC,YAAY,CAAAI,QAAA,CAAAQ,IAAA,CAOZX,QAAQ,CAAGD,YAAY,CAACW,IAAI,CAACjC,KAAK,CACxC,CAAAgB,WAAA,KAAI,CAAChB,KAAK,EAACqC,IAAI,CAAAC,KAAA,CAAAtB,WAAA,CAAAuB,kBAAA,CAAIhB,QAAQ,EAAC,CAE5B,IAAI,CAACiB,QAAQ,CAAC,CAAC,CAAAd,QAAA,CAAAE,IAAA,kBAAAF,QAAA,CAAAC,IAAA,IAAAD,QAAA,CAAAe,EAAA,CAAAf,QAAA,aAAAA,QAAA,CAAAE,IAAA,UAET,KAAI,CAACc,QAAQ,CAAAhB,QAAA,CAAAe,EAAM,CAAC,0BAAAf,QAAA,CAAAiB,IAAA,OAAA5B,OAAA,iBAE7B,YAAAL,WAAA,SAAAC,WAAA,CAAA2B,KAAA,MAAAM,SAAA,UAAAlC,UAAA,OAAAH,GAAA,YAAAC,KAAA,CAED,SAAAgC,SAAA,CAAkB,KAAAK,KAAA,SAAT,CAAAC,KAAK,CAAAF,SAAA,CAAAG,MAAA,IAAAH,SAAA,MAAAI,SAAA,CAAAJ,SAAA,IAAC,CAAC,CACd,GAAM,CAAA7C,iBAAiB,CAAGkD,MAAM,CAACC,IAAI,CAAC,IAAI,CAACnD,iBAAiB,CAAC,CAACgD,MAAM,CAEpE,GAAIhD,iBAAiB,EAAI,IAAI,CAACR,eAAe,CAAE,CAC7C,OACF,CAEA,GAAI,CAAC,IAAI,CAACS,KAAK,CAAC+C,MAAM,CAAE,CACtB,GAAI,CAAChD,iBAAiB,CAAE,CACtB,IAAI,CAAC2C,QAAQ,CAAC,CAAC,CACjB,CAEA,OACF,CAEA,GAAM,CAAAS,IAAI,CAAG,IAAI,CAACnD,KAAK,CAACoD,GAAG,CAAC,CAAC,CAC7B,GAAI,IAAI,CAAC1D,IAAI,EAAIyD,IAAI,CAAE,CACrB,GAAM,CAAAE,QAAQ,CAAG,CAACF,IAAI,CAACG,UAAU,CAAG,CAAC,EAAI,IAAI,CAAClE,SAAS,CACvD,GAAM,CAAAmE,KAAK,CAAG,IAAI,CAAC7D,IAAI,CAAC8D,KAAK,CAACH,QAAQ,CAAEA,QAAQ,CAAG,IAAI,CAACjE,SAAS,CAAC,CAElE,GAAM,CAAAqE,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAA,CAAS,CAC7BZ,KAAI,CAACL,QAAQ,CAAC,CAAC,CACjB,CAAC,CAED,IAAI,CAACkB,SAAS,CAACH,KAAK,CAAEJ,IAAI,CAAEM,gBAAgB,CAAC,CAC1CE,IAAI,CAAC,UAAM,CACVd,KAAI,CAACL,QAAQ,CAAC,CAAC,CACjB,CAAC,CAAC,CACDoB,KAAK,CAAC,SAACC,KAAK,CAAK,CAChB,GAAIf,KAAK,EAAI,CAAC,CAAC,CACbA,KAAK,EAAE,CACP,GAAM,CAAAgB,IAAI,CAAG,QAAP,CAAAA,IAAIA,CAAIC,EAAE,QAAK,IAAI,CAAAC,OAAO,CAAC,SAACC,GAAG,QAAK,CAAAC,UAAU,CAACD,GAAG,CAAEF,EAAE,CAAC,GAAC,GAC9D;AACAI,OAAO,CAACC,GAAG,SAAAC,MAAA,CAASlB,IAAI,CAACG,UAAU,oCAAAe,MAAA,CAAkChF,IAAA,CAAAiF,GAAA,EAAC,CAAIxB,KAAK,EAAG,GAAG,uBAAqB,CAAC,CAC3GgB,IAAI,CAACzE,IAAA,CAAAiF,GAAA,EAAC,CAAIxB,KAAK,EAAG,GAAG,CAAC,CAACa,IAAI,CAAC,UAAM,CAChCd,KAAI,CAAC7C,KAAK,CAACqC,IAAI,CAACc,IAAI,CAAC,CACrBN,KAAI,CAACL,QAAQ,CAACM,KAAK,CAAC,CACtB,CAAC,CAAC,CACJ,CAAC,IAAI,CACHqB,OAAO,CAACC,GAAG,SAAAC,MAAA,CAASlB,IAAI,CAACG,UAAU,gCAA8B,CAAC,CAClET,KAAI,CAACH,QAAQ,CAACmB,KAAK,CAAC,CACtB,CACF,CAAC,CAAC,CACN,CACF,CAAC,GAAAtD,GAAA,YAAAC,KAAA,gBAAA+D,SAAA,CAAA3D,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAED,SAAA0D,SAAeX,KAAK,SAAAhD,mBAAA,GAAAW,IAAA,UAAAiD,UAAAC,SAAA,kBAAAA,SAAA,CAAA/C,IAAA,CAAA+C,SAAA,CAAA9C,IAAA,cACdiC,KAAK,EAAI,CAAC,IAAI,CAACjE,OAAO,GAAA8E,SAAA,CAAA9C,IAAA,UACxB,IAAI,CAACvB,SAAS,CAACwD,KAAK,CAAC,QAAAa,SAAA,CAAAC,MAAA,sBAInBd,KAAK,EAAAa,SAAA,CAAA9C,IAAA,UACP,IAAI,CAACvB,SAAS,CAACwD,KAAK,CAAC,QAAAa,SAAA,CAAAC,MAAA,kBAAAD,SAAA,CAAA/C,IAAA,GAAA+C,SAAA,CAAA9C,IAAA,SAKf,KAAI,CAACgD,mBAAmB,CAAC,CAAC,QAAAF,SAAA,CAAA9C,IAAA,kBAAA8C,SAAA,CAAA/C,IAAA,IAAA+C,SAAA,CAAAjC,EAAA,CAAAiC,SAAA,aAEhC,IAAI,CAACrE,SAAS,CAAAqE,SAAA,CAAAjC,EAAM,CAAC,0BAAAiC,SAAA,CAAA/B,IAAA,OAAA6B,QAAA,iBAExB,YAAA9B,SAAAmC,EAAA,SAAAN,SAAA,CAAAjC,KAAA,MAAAM,SAAA,UAAAF,QAAA,OAAAnC,GAAA,uBAAAC,KAAA,gBAAAsE,oBAAA,CAAAlE,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAiE,SAAA,MAAAC,+BAAA,QAAAnE,mBAAA,GAAAW,IAAA,UAAAyD,UAAAC,SAAA,kBAAAA,SAAA,CAAAvD,IAAA,CAAAuD,SAAA,CAAAtD,IAAA,cACM,IAAI,CAAC1B,MAAM,EAAI,IAAI,CAACC,OAAO,GAAA+E,SAAA,CAAAtD,IAAA,UACvBoD,+BAA+B,CAAG,CACtC9E,MAAM,CAAE,IAAI,CAACA,MAAM,CACnBC,OAAO,CAAE,IAAI,CAACA,OAAO,CACrBH,KAAK,CAAE,IAAI,CAACC,aACd,CAAC,CAAAiF,SAAA,CAAAtD,IAAA,SAEK,CAAA/C,GAAG,CAACiD,OAAO,CAAC,CAChBC,GAAG,CAAE,WAAW,CAChBC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAE+C,+BAA+B,CACrCjG,OAAO,CAAC,IAAI,CAACA,OACf,CAAC,CAAC,yBAAAmG,SAAA,CAAAvC,IAAA,OAAAoC,QAAA,QAEL,YAAAH,oBAAA,SAAAE,oBAAA,CAAAxC,KAAA,MAAAM,SAAA,UAAAgC,mBAAA,OAAArE,GAAA,aAAAC,KAAA,CAED,SAAAkD,UAAUH,KAAK,CAAEJ,IAAI,CAAEM,gBAAgB,CAAE,KAAA0B,MAAA,MACvC,MAAO,IAAI,CAAAnB,OAAO,CAAC,SAACoB,OAAO,CAAEC,MAAM,CAAK,CACtCF,MAAI,CAACG,MAAM,CAAC/B,KAAK,CAAEJ,IAAI,CAAEM,gBAAgB,CAAC,CACvCE,IAAI,CAAC,SAAC4B,MAAM,CAAK,CAChB,GAAIA,MAAM,GAAK,GAAG,CAAE,CAClBF,MAAM,CAAC,GAAI,CAAAG,KAAK,CAAC,qBAAqB,CAAC,CAAC,CACxC,OACF,CAEAJ,OAAO,CAAC,CAAC,CACX,CAAC,CAAC,CACDxB,KAAK,CAAC,SAACC,KAAK,CAAK,CAChBwB,MAAM,CAACxB,KAAK,CAAC,CACf,CAAC,CAAC,CACN,CAAC,CAAC,CACJ,CAAC,GAAAtD,GAAA,kBAAAC,KAAA,CAED,SAAAiF,eAAetC,IAAI,CAAEuC,KAAK,CAAE,KAAAC,MAAA,MAC1B,GAAI,IAAI,CAACjG,IAAI,CAAE,CACb,GAAIgG,KAAK,CAACE,IAAI,GAAK,UAAU,EAAIF,KAAK,CAACE,IAAI,GAAK,OAAO,EAAIF,KAAK,CAACE,IAAI,GAAK,OAAO,CAAE,CACjF,IAAI,CAAC9F,aAAa,CAACqD,IAAI,CAAC,CAAGuC,KAAK,CAACG,MAAM,CACzC,CAEA,GAAIH,KAAK,CAACE,IAAI,GAAK,UAAU,CAAE,CAC7B,IAAI,CAAC/F,YAAY,EAAI,IAAI,CAACC,aAAa,CAACqD,IAAI,CAAC,EAAI,CAAC,CAClD,MAAO,KAAI,CAACrD,aAAa,CAACqD,IAAI,CAAC,CACjC,CAEA,GAAM,CAAA2C,UAAU,CAAG7C,MAAM,CAACC,IAAI,CAAC,IAAI,CAACpD,aAAa,CAAC,CAC/CiG,GAAG,CAACC,MAAM,CAAC,CACXC,MAAM,CAAC,SAACC,IAAI,CAAEC,EAAE,QAAM,CAAAD,IAAI,EAAIP,MAAI,CAAC7F,aAAa,CAACqG,EAAE,CAAC,EAAC,CAAE,CAAC,CAAC,CAE5D,GAAM,CAAAjE,IAAI,CAAG7C,IAAI,CAACG,GAAG,CAAC,IAAI,CAACK,YAAY,CAAGiG,UAAU,CAAE,IAAI,CAACpG,IAAI,CAAC0C,IAAI,CAAC,CAErE,GAAM,CAAAgE,KAAK,CAAG,IAAI,CAAC1G,IAAI,CAAC0C,IAAI,CAE5B,GAAM,CAAAiE,UAAU,CAAGhH,IAAI,CAACiH,KAAK,CAAEpE,IAAI,CAAGkE,KAAK,CAAI,GAAG,CAAC,CAEnD,IAAI,CAAChG,YAAY,CAAC,CAChB8B,IAAI,CAAEA,IAAI,CACVkE,KAAK,CAAEA,KAAK,CACZC,UAAU,CAAEA,UACd,CAAC,CAAC,CACJ,CACF,CAAC,GAAA9F,GAAA,UAAAC,KAAA,CAED,SAAA8E,OAAO5F,IAAI,CAAEyD,IAAI,CAAEM,gBAAgB,CAAE,KAAA8C,MAAA,MACnC;AACA,MAAO,IAAI,CAAAvC,OAAO,CAAC,SAACoB,OAAO,CAAEC,MAAM,CAAK,CACtC,GAAM,CAAAmB,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CAAI3C,KAAK,CAAEV,IAAI,CAAEsD,OAAO,CAAK,CAC9C,MAAO,CAAAF,MAAI,CAACxG,iBAAiB,CAACoD,IAAI,CAACG,UAAU,CAAG,CAAC,CAAC,CAClD+B,MAAM,CAACxB,KAAK,CAAC,CACb6C,MAAM,CAACC,mBAAmB,CAAC,SAAS,CAAEF,OAAO,CAAC,CAChD,CAAC,CACD,GAAIF,MAAI,CAACrG,MAAM,EAAIqG,MAAI,CAACpG,OAAO,CAAE,CAC/B,GAAG,CAACuG,MAAM,CAACE,SAAS,CAACC,MAAM,CACzBxB,MAAM,CAAC,GAAI,CAAAG,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAExC,GAAM,CAAAsB,GAAG,CAAIP,MAAI,CAACxG,iBAAiB,CAACoD,IAAI,CAACG,UAAU,CAAG,CAAC,CAAC,CAAG,GAAI,CAAAyD,cAAc,CAAC,CAAE,CAChFD,GAAG,CAACrH,OAAO,CAAG8G,MAAI,CAAC9G,OAAO,CAC1BgE,gBAAgB,CAAC,CAAC,CAElB,GAAM,CAAAuD,gBAAgB,CAAGT,MAAI,CAACd,cAAc,CAACwB,IAAI,CAACV,MAAI,CAAEpD,IAAI,CAACG,UAAU,CAAG,CAAC,CAAC,CAE5EwD,GAAG,CAACxB,MAAM,CAAC4B,gBAAgB,CAAC,UAAU,CAAEF,gBAAgB,CAAC,CAEzDF,GAAG,CAACI,gBAAgB,CAAC,OAAO,CAAEF,gBAAgB,CAAC,CAC/CF,GAAG,CAACI,gBAAgB,CAAC,OAAO,CAAEF,gBAAgB,CAAC,CAC/CF,GAAG,CAACI,gBAAgB,CAAC,SAAS,CAAEF,gBAAgB,CAAC,CAEjDF,GAAG,CAACK,IAAI,CAAC,KAAK,CAAEhE,IAAI,CAACiE,SAAS,CAAC,CAC/B,GAAM,CAAAC,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAA,QAAS,CAAAP,GAAG,CAACQ,KAAK,CAAC,CAAC,GAClCR,GAAG,CAACS,kBAAkB,CAAG,UAAM,CAC7B,GAAIT,GAAG,CAACU,UAAU,GAAK,CAAC,EAAIV,GAAG,CAACvB,MAAM,GAAK,GAAG,CAAE,CAC9C,GAAM,CAAAkC,IAAI,CAAGX,GAAG,CAACY,iBAAiB,CAAC,MAAM,CAAC,CAE1C,GAAID,IAAI,CAAE,CACR,GAAM,CAAAE,YAAY,CAAG,CACnBrE,UAAU,CAAEH,IAAI,CAACG,UAAU,CAC3BmE,IAAI,CAAEA,IAAI,CAACG,UAAU,CAAC,GAAG,CAAE,EAAE,CAC/B,CAAC,CAEDrB,MAAI,CAACtG,aAAa,CAACoC,IAAI,CAACsF,YAAY,CAAC,CAErCvC,OAAO,CAAC0B,GAAG,CAACvB,MAAM,CAAC,CACnB,MAAO,CAAAgB,MAAI,CAACxG,iBAAiB,CAACoD,IAAI,CAACG,UAAU,CAAG,CAAC,CAAC,CAClDoD,MAAM,CAACC,mBAAmB,CAAC,SAAS,CAAEU,QAAQ,CAAC,CACjD,CACF,CACF,CAAC,CAEDP,GAAG,CAACe,OAAO,CAAG,SAAChE,KAAK,CAAK,CACvB2C,aAAa,CAAC3C,KAAK,CAAEV,IAAI,CAAEkE,QAAQ,CAAC,CACtC,CAAC,CACDP,GAAG,CAACgB,SAAS,CAAG,SAACjE,KAAK,CAAK,CACzB2C,aAAa,CAAC3C,KAAK,CAAEV,IAAI,CAAEkE,QAAQ,CAAC,CACtC,CAAC,CACDP,GAAG,CAACiB,OAAO,CAAG,UAAM,CAClBvB,aAAa,CAAC,GAAI,CAAAhB,KAAK,CAAC,mCAAmC,CAAC,CAAErC,IAAI,CAAC,CACrE,CAAC,CACDuD,MAAM,CAACQ,gBAAgB,CAAC,SAAS,CAAEG,QAAQ,CAAC,CAC5CP,GAAG,CAACkB,IAAI,CAACtI,IAAI,CAAC,CAChB,CACF,CAAC,CAAC,CACJ,CAAC,GAAAa,GAAA,cAAAC,KAAA,CAID,SAAAyH,WAAWA,WAAU,CAAE,CACrB,IAAI,CAAC7H,YAAY,CAAG6H,WAAU,CAC9B,MAAO,KAAI,CACb,CAAC,GAAA1H,GAAA,WAAAC,KAAA,CAED,SAAA0H,QAAQA,QAAO,CAAE,CACf,IAAI,CAAC7H,SAAS,CAAG6H,QAAO,CACxB,MAAO,KAAI,CACb,CAAC,GAAA3H,GAAA,SAAAC,KAAA,CAED,SAAA8G,MAAA,CAAQ,KAAAa,MAAA,MACNlF,MAAM,CAACC,IAAI,CAAC,IAAI,CAACnD,iBAAiB,CAAC,CAChCgG,GAAG,CAACC,MAAM,CAAC,CACXoC,OAAO,CAAC,SAACjC,EAAE,CAAK,CACfgC,MAAI,CAACpI,iBAAiB,CAACoG,EAAE,CAAC,CAACmB,KAAK,CAAC,CAAC,CACpC,CAAC,CAAC,CAEJ,IAAI,CAAC1H,OAAO,CAAG,IAAI,CACrB,CAAC,WAAAZ,QAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}